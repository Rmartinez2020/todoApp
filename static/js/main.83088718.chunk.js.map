{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","state","text","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","props","onSubmit","id","shortid","generate","complete","this","className","onChange","type","placeholder","onClick","React","Component","Todo","style","textDecoration","todo","delete","toggleStatus","class","TodoList","todos","displayed","addTodo","map","deleteTodo","filter","changeDisplayed","str","deleteCompletedTodos","console","log","length","some","width","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.83088718.chunk.js","sourcesContent":["// === Dependencies ===\r\nimport React from 'react';\r\nimport shortid from 'shortid';\r\n\r\nclass TodoForm extends React.Component {\r\n    /* Set up initial state */\r\n    state = {\r\n        text: \"\"\r\n    };\r\n\r\n    /* create on change function that will change the state */\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    };\r\n\r\n    /* create function for submitting the form */\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        /* submit a new todo */\r\n        this.props.onSubmit({\r\n            id: shortid.generate(),\r\n            text: this.state.text,\r\n            complete: false,\r\n        });\r\n        this.setState({\r\n            text: \"\"\r\n        })\r\n    };\r\n\r\n    /* create an input to add todos */\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <div className=\"form-group\">\r\n                    <input\r\n                        name=\"text\"\r\n                        value={this.state.text}\r\n                        onChange={this.handleChange}\r\n                        type=\"text\"\r\n                        placeholder=\"To-Do...\" />\r\n                    <button className=\"btn btn-primary m-2\" onClick={this.handleSubmit}>Add To-Do</button>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoForm;","// === Dependencies ===\r\nimport React from 'react';\r\n\r\nfunction Todo(props) {\r\n    return (\r\n        <li className=\"list-group-item text-center\">\r\n            <div\r\n                style={{\r\n                    textDecoration: props.todo.complete ? \"line-through\" : \"\"\r\n                }}\r\n                className=\"float-left\"\r\n            >{props.todo.text}</div>\r\n            <button className=\"btn btn-danger ml-2 float-right\" onClick={props.delete}>X</button>\r\n            <button className=\"btn float-right\" onClick={props.toggleStatus}>\r\n                {props.todo.complete ? <i class=\"fas fa-check-square fa-2x\"></i>\r\n                :<i class=\"far fa-check-square fa-2x\"></i>}</button>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Todo;","// === Dependencies ===\r\nimport React from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport Todo from './Todo';\r\n\r\nclass TodoList extends React.Component {\r\n\r\n    /* Set up initial state */\r\n    state = {\r\n        todos: [],\r\n        displayed: \"all\"\r\n    };\r\n\r\n    /* create function that adds to the todos array */\r\n    addTodo = todo => {\r\n        this.setState({\r\n            todos: [todo, ...this.state.todos]\r\n        });\r\n    };\r\n\r\n    /* create function to mark todos as complete */\r\n    toggleStatus = id => {\r\n        this.setState({\r\n            todos: this.state.todos.map(todo => {\r\n                /*check for the todo that needs to be changed to complete */\r\n                if (todo.id === id) {\r\n                    return {\r\n                        text: todo.text,\r\n                        id: todo.id,\r\n                        complete: !todo.complete\r\n                    };\r\n                } else {\r\n                    return todo;\r\n                };\r\n            })\r\n        });\r\n    };\r\n\r\n    /* create function that will delete a todo */\r\n    deleteTodo = id => {\r\n        this.setState({\r\n            todos: this.state.todos.filter(todo => todo.id !== id)\r\n        })\r\n    }\r\n\r\n    /* create function that will change the state of displayed */\r\n    changeDisplayed = (str) => {\r\n        this.setState({\r\n            displayed: str\r\n        });\r\n    };\r\n\r\n    /* create function that deletes all completed todos */\r\n    deleteCompletedTodos = () => {\r\n        this.setState({\r\n            todos: this.state.todos.filter(todo => !todo.complete)\r\n        })\r\n    };\r\n\r\n    render() {\r\n\r\n        let todos = [];\r\n        /* check which todos need to be displayed */\r\n        switch (this.state.displayed) {\r\n            case \"all\":\r\n                todos = this.state.todos;\r\n                break;\r\n            case \"active\":\r\n                todos = this.state.todos.filter(todo => !todo.complete)\r\n                break;\r\n            case \"completed\":\r\n                todos = this.state.todos.filter(todo => todo.complete)\r\n                break;\r\n            default:\r\n                console.log(\"error processing content to display.\")\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <div className=\"container-fluid\">\r\n                <h1> To-Do List</h1>\r\n                <TodoForm onSubmit={this.addTodo} />\r\n                {/* display number of active todos */}\r\n                <div>To-Dos Left: {this.state.todos.filter(todo => !todo.complete).length}</div>\r\n                {/* change the content that will be displayed by clicking on buttons */}\r\n                <div>\r\n                    <button className=\"btn btn-primary m-2\" onClick={() => this.changeDisplayed(\"all\")} >All</button>\r\n                    <button className=\"btn btn-success m-2\" onClick={() => this.changeDisplayed(\"active\")} >Active</button>\r\n                    <button className=\"btn btn-warning m-2\" onClick={() => this.changeDisplayed(\"completed\")} >Completed</button>\r\n                </div>\r\n                {this.state.todos.some(todo => todo.complete) ? <button className=\"btn btn-danger m-2\" onClick={() => this.deleteCompletedTodos()} >Delete Completed To-Dos</button> : null}\r\n                {/* map over todos in the state to display to page */}\r\n                <hr />\r\n                <ul className=\"list-group m-auto\" style={{width: \"18rem\"}}>\r\n                {todos.map(todo => {\r\n                    return <Todo\r\n                        key={todo.id}\r\n                        toggleStatus={() => this.toggleStatus(todo.id)}\r\n                        todo={todo}\r\n                        delete={() => this.deleteTodo(todo.id)} />\r\n                })}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}